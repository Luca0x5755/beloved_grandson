# infra/nginx/default.conf
# Nginx 負載平衡器設定檔 (模板)

# 上游服務定義
upstream web_app_upstream {
    server web-app:5000;
}

upstream minio_api_upstream {
    server minio:9000;
}

# 伺服器區塊 1: 處理 HTTP (Port 80)
# 主要功能：
# 1. 回應 Let's Encrypt 的 HTTP-01 驗證請求。
# 2. 將所有其他的 HTTP 請求永久重定向到 HTTPS。
server {
    listen 80;
    # The domain will be substituted from the .env file
    server_name ${DOMAIN_NAME};

    # 處理 Let's Encrypt 的驗證請求
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all; # Ensure validation servers can access this path
    }

    # 將所有其他請求重定向到 HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# 伺服器區塊 2: 處理 HTTPS (Port 443)
# 主要功能：
# 1. 啟用 SSL/TLS 加密。
# 2. 將請求代理到後端的應用程式 (web-app, minio)。
server {
    listen 443 ssl;
    # The domain will be substituted from the .env file
    server_name ${DOMAIN_NAME};

    # SSL 憑證路徑 (容器內路徑)
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;

    # 引入推薦的 SSL 安全設定
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # 代理前端靜態檔案到 Flask，並設定快取
    location /static/dist/ {
        proxy_pass http://web_app_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 快取靜態資源 (JS, CSS, 圖片等)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://web_app_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 設定快取
            proxy_cache_valid 200 1y;
            expires 1y;
            add_header Cache-Control "public, no-transform";
            access_log off;
        }
        
        # HTML 檔案不快取，確保更新能及時生效
        location ~* \.html$ {
            proxy_pass http://web_app_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }

    # API 請求代理到 Flask 後端
    location /api/ {
        proxy_pass http://web_app_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API 超時設定
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 檔案上傳大小限制 (語音檔案最大16MB + buffer)
        client_max_body_size 20M;
    }
    
    # 語音API特殊配置 - 較長的超時時間用於音頻處理
    location /api/v1/voice/ {
        proxy_pass http://web_app_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 語音處理需要較長時間
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 300s;  # 5分鐘用於AI處理
        
        # 音頻檔案上傳限制
        client_max_body_size 20M;
        
        # 上傳緩衝配置
        client_body_buffer_size 128k;
        proxy_buffering off;
    }
    
    # 問卷API特殊配置 - 保護問卷提交
    location /api/v1/patients/ {
        proxy_pass http://web_app_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API 超時設定
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 檔案上傳大小限制
        client_max_body_size 20M;
    }

    # WebSocket 支援 (Flask-SocketIO)
    location /socket.io/ {
        proxy_pass http://web_app_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 特殊配置
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
        
        # 長連接配置
        proxy_read_timeout 86400;
    }

    # Swagger 文檔代理到 Flask
    location /swagger/ {
        proxy_pass http://web_app_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 其他所有請求代理到 Flask (包括 SPA 路由)
    location / {
        proxy_pass http://web_app_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 代理 MinIO 儲存桶 (例如：音檔) 的公開存取
    # Presigned URL 的路徑會是 /<bucket-name>/<object-name>
    # 因此我們需要為每個需要公開存取的儲存桶建立一個 location block
    location /audio-bucket/ {
        proxy_pass http://minio_api_upstream;
        # 傳遞原始主機名稱，這對於驗證預簽章 URL 至關重要
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }



    # --- Additional Security Headers ---
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
}
